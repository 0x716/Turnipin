// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: document.sql

package db

import (
	"context"
)

const getDocumentByID = `-- name: GetDocumentByID :one
SELECT id, title, filename, upload_at FROM template_documents WHERE id = ?
`

func (q *Queries) GetDocumentByID(ctx context.Context, id int64) (TemplateDocument, error) {
	row := q.db.QueryRowContext(ctx, getDocumentByID, id)
	var i TemplateDocument
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Filename,
		&i.UploadAt,
	)
	return i, err
}

const insertDocument = `-- name: InsertDocument :exec
INSERT INTO template_documents (title, filename) VALUES (?, ?)
`

type InsertDocumentParams struct {
	Title    string
	Filename string
}

func (q *Queries) InsertDocument(ctx context.Context, arg InsertDocumentParams) error {
	_, err := q.db.ExecContext(ctx, insertDocument, arg.Title, arg.Filename)
	return err
}

const listDocuments = `-- name: ListDocuments :many
SELECT id, title, filename, upload_at FROM template_documents
`

func (q *Queries) ListDocuments(ctx context.Context) ([]TemplateDocument, error) {
	rows, err := q.db.QueryContext(ctx, listDocuments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TemplateDocument
	for rows.Next() {
		var i TemplateDocument
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Filename,
			&i.UploadAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
